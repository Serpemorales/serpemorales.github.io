{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"practica2_1/","title":"Pr\u00e1ctica 2.1 - Instalaci\u00f3n y configuraci\u00f3n de servidor web Nginx","text":""},{"location":"practica2_1/#instalacion-servidor-web-nginx","title":"Instalaci\u00f3n servidor web nginx","text":"<p>Primero tenemos que instalar el servidor nginx, actualizando los repositorios e instal\u00e1ndolo desde la consola.</p> <p></p>"},{"location":"practica2_1/#creacion-de-la-carpeta-del-sitio-web","title":"Creaci\u00f3n de la carpeta del sitio web","text":"<p>Todos los archivos que forman parte del sitio web tendr\u00e1n que organizarse en carpetas, que normalmente las encontramos en /var/www.</p> <p>Creamos el directorio sin mayor problema, y una vez creado, nos aseguramos de que tenemos git instalado para poder clonar el repositorio de github proporcionado.</p> <p></p> <p>Tras clonar el repositorio, haremos que el propietario de la carpeta y todo lo de dentro sera el usuario www-data, utilizando los siguientes comandos.</p> <p></p> <p>Si todo ha salido bien, utilizando la IP de la maquina virtual, nos permitir\u00e1 acceder a una web donde se muestra un mensaje</p> <p></p>"},{"location":"practica2_1/#configuracion-del-servidor-web-nginx","title":"Configuraci\u00f3n del servidor web NGINX","text":"<p>En Nginx hay dos rutas importantes, tenemos sites-available, la cual tiene los archivos de configuraci\u00f3n de hosts virtuales o los bloques disponibles en el servidor. La otra es sites-enabled, que contiene los archivos de configuraci\u00f3n de los sitios habilitados.</p> <p>Para que Nginx presente el contenido de nuestra propia web, tenemos que crear un bloque de servidor con todas las directivas correctas, y lo haremos modificando el archivo de configuraci\u00f3n predeterminado, utilizando la consola.</p> <p></p> <p>Despu\u00e9s, crearemos un archivo simb\u00f3lico entre el archivo y el de los sitios habilitados.</p> <p></p> <p>Reiniciamos el servidor, para asegurarnos de que se aplica toda la nueva configuraci\u00f3n</p> <p></p>"},{"location":"practica2_1/#comprobaciones","title":"Comprobaciones","text":"Comprobaci\u00f3n del correcto funcionamiento <p>Como no tenemos un servidor DNS, tendremos que hacerlo de manera manual. Para ello, tenemos que editar el archivo que se encuentra en /etc/hosts de nuestra maquina principal, a\u00f1adiendo al archivo la siguiente l\u00ednea</p> <p></p> Comprobaci\u00f3n de los registros del servidor <p>Para ver que todo se esta registrando correctamente en los logs, vamos a utilizar dos comandos en la consola que nos dar\u00e1n acceso a estos.</p> <p></p> <p></p>"},{"location":"practica2_1/#ftp","title":"FTP","text":"<p>Vamos a configurar el protocolo de transferencia de archivos FPT, que es una manera de transferir a trav\u00e9s de una red TCP.</p> <p>En nuestro caso, vamos a configurar un servidor SFTP, que es lo mismo pero a\u00f1adiendo una capa de seguridad y privacidad al propio FTP.</p> Configurar servidor SFTP en Debian <p>Primero instalamos todo desde los siguientes repositorios.</p> <p> Despu\u00e9s creamos una carpeta en el home de Debian</p> <p></p> <p>Ahora tenemos que crear unos certificados de seguridad que son necesarios para aportar la capa de cifrado a la conexi\u00f3n. </p> <p></p> <p>Ya terminados estos pasos, vamos a realizar la configuraci\u00f3n del propio vsftpd, en mi caso he utilizado nano como editor de texto, borrando las l\u00edneas de archivo</p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p>Para a\u00f1adir otras en su lugar</p> <p></p> <p>Guardamos cambios del archivo, y volvemos a reiniciar para que coja la configuraci\u00f3n nueva que hemos a\u00f1adido.</p> <p></p> <p>Tras todo esto, ya podemos acceder al servidor, y para ello vamos a necesitar un cliente FTP, en mi caso, he descargado Filezilla</p> <p></p> <p>Una vez instalado, podemos conectarnos de manera insegura con el puerto 21, o con el 22, en mi caso, prob\u00e9 primero el 21 y despu\u00e9s el 22, introduciendo los datos necesarios para conectar al servidor.</p> <p></p> <p>Tras darla a conexi\u00f3n r\u00e1pida saldr\u00e1 un aviso, le daremos a aceptar sin ning\u00fan problema.</p> <p></p> <p>Utilizando las carpetas de la parte izquierda, nos aseguraremos de subir un archivo a la carpeta FTP del servidor, en mi caso, como prueba he subido una imagen</p> <p></p> <p>Para probar que todo ha ido bien, volvemos a la m\u00e1quina virtual, y deber\u00edamos tener all\u00ed el archivo transferido</p> <p></p>"},{"location":"practica2_1/#https","title":"HTTPS","text":"<p>Vamos a a\u00f1adir al servidor una capa de seguridad extra y necesaria, para obligar a nuestros sitios web a hacer uso de los certificados SSL y acceder a ellos mediante HTTPS.</p> <p>Lo primero que hacemos es generar los certificados autofirmados</p> <p></p> <p>Y despu\u00e9s, debemos ir al fichero de configuraci\u00f3n del host virtual, para cambiar los par\u00e1metros de la siguiente manera, asegur\u00e1ndonos de que si entramos por HTTP nos redirigir\u00e1 autom\u00e1ticamente al HTTPS</p> <p></p> <p>Para comprobarlo, vamos a intentar entrar en la web, y vemos que efectivamente, nos redirige a la web HTTPS.</p> <p></p>"},{"location":"practica2_1/#cuestiones","title":"Cuestiones","text":"Cuesti\u00f3n 1  &gt; \u00bfQu\u00e9 pasa si no hago el link simb\u00f3lico entre `sites-available` y &gt; `sites-enabled` de mi sitio web?  Si no realizamos el link simb\u00f3lico, no se dar\u00e1 de alta autom\u00e1ticamente nuestra configuraci\u00f3n y no ser\u00e1 activada, pues Nginx busca las configuraciones activas una vez est\u00e1n enlazadas. Cuesti\u00f3n 2  &gt; \u00bfQu\u00e9 pasa si no le doy los permisos adecuados a `/var/www/nombre_web`?  Si no le damos los permisos adecuados, nos dar\u00e1 un error de acceso no autorizado cuando intentemos entrar en la p\u00e1gina web. B\u00e1sicamente, nuestra web no funcionar\u00e1 correctamente.  ---  ![Firma Sergio](../assets/images/yuki_dev.png)"}]}